name: 'Setup build2'
description: 'Installs the build2 build system on the runner.'
author: 'Fabian Meyer'
branding:
  icon: 'box'
  color: 'blue'
inputs:
  build2-version:
    description: 'Version spec of the version to use. Can be "latest", "staged", "0.14.0", etc.'
    default: 'latest'
  build2-trust:
    description: 'Trust key for build2 installation.'
    default: '70:64:FE:E4:E0:F3:60:F1:B4:51:E1:FA:12:5C:E0:B3:DB:DF:96:33:39:B9:2E:E5:C2:68:63:4C:A6:47:39:43'
  build2-windows-compiler:
    description: 'Compiler used to compile build2 in Windows runners. Can be "msvc", "mingw" or "clang".'
    default: 'msvc'
runs:
  using: "composite"
  steps:
    - if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        BUILD2_BUILD_DIR="${{ runner.temp }}/build2-build"
        BUILD2_VERSION="${{ inputs.build2-version }}"
        BUILD2_TRUST="${{ inputs.build2-trust }}"

        extract_build2_archive()
        {
          grep "toolchain" "$1" | sed "s|[^\*]*\*||g"
        }

        extract_build2_script()
        {
          grep "build2-install-.*\.sh" toolchain.sha256 | sed "s|[^\*]*\*||g"
        }

        install_build2()
        {
          archive_url=$1
          script_url=$2
          script_name=$(basename "$script_url")

          echo "Download $archive_url"
          curl -sSfO "$archive_url"

          echo "Download $script_url"
          curl -sSfO "$script_url"

          sh "$script_name" --local --no-check --yes --trust "$BUILD2_TRUST"
        }

        mkdir -p "$BUILD2_BUILD_DIR"
        cd "$BUILD2_BUILD_DIR"

        case "$BUILD2_VERSION" in
        "latest")
          echo "Download https://download.build2.org/toolchain.sha256"
          curl -sSfO https://download.build2.org/toolchain.sha256

          archive_name=$(extract_build2_archive toolchain.sha256)
          script_name=$(extract_build2_script toolchain.sha256)

          BUILD2_ARCHIVE="https://download.build2.org/$archive_name"
          BUILD2_SCRIPT="https://download.build2.org/$script_name"
          ;;
        "staged")
          echo "Download https://stage.build2.org/0/toolchain.sha256"
          curl -sSfO https://stage.build2.org/0/toolchain.sha256
          archive_name=$(extract_build2_archive toolchain.sha256)
          script_name=$(extract_build2_script toolchain.sha256)

          BUILD2_ARCHIVE="https://stage.build2.org/0/$archive_name"
          BUILD2_SCRIPT="https://stage.build2.org/0/$script_name"
          ;;
        *)
          BUILD2_ARCHIVE="https://download.build2.org/$BUILD2_VERSION/build2-toolchain-$BUILD2_VERSION.tar.gz"
          BUILD2_SCRIPT="https://download.build2.org/$BUILD2_VERSION/build2-install-$BUILD2_VERSION.sh"
          ;;
        esac

        install_build2 "$BUILD2_ARCHIVE" "$BUILD2_SCRIPT"

    - run: b --version
      shell: bash
      if: ${{ runner.os != 'Windows' }}
    - run: bdep --version
      shell: bash
      if: ${{ runner.os != 'Windows' }}
    - run: bpkg --version
      shell: bash
      if: ${{ runner.os != 'Windows' }}

    - if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run: |
        $BUILD2_BUILD_DIR="${{ runner.temp }}\build2-build"
        $BUILD2_VERSION="${{ inputs.build2-version }}"
        $BUILD2_TRUST="${{ inputs.build2-trust }}"
        $BUILD2_WINDOWS_COMPILER="${{ inputs.build2-windows-compiler }}"

        function extract_build2_archive($Path)
        {
          $match_info = Select-String -Path $Path -Pattern "\*.*toolchain.*"
          return $match_info.matches[0].value.substring(1)
        }

        function extract_build2_baseutils($Path)
        {
          $match_info = Select-String -Path $Path -Pattern "\*.*baseutils.*"
          return $match_info.matches[0].value.substring(1)
        }

        function extract_build2_script($Path)
        {
          $match_info = Select-String -Path $Path -Pattern "\*.*build2-install-$BUILD2_WINDOWS_COMPILER-.*\.bat"
          return $match_info.matches[0].value.substring(1)
        }

        function install_build2($ArchiveUrl, $ScriptUrl, $BaseUtilsUrl)
        {
          $ArchiveName= Split-Path $ArchiveUrl -leaf
          $ScriptName= Split-Path $ScriptUrl -leaf
          $BaseutilsName= Split-Path $BaseUtilsUrl -leaf

          Write-Output "Download $ArchiveUrl"
          Invoke-WebRequest -Uri $ArchiveUrl -OutFile $ArchiveName

          Write-Output "Download $BaseUtilsUrl"
          Invoke-WebRequest -Uri $BaseUtilsUrl -OutFile $BaseutilsName

          Write-Output "Download $ScriptUrl"
          Invoke-WebRequest -Uri $ScriptUrl -OutFile $ScriptName

          $vswhere = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
          $vcvarspath = &$vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          Write-Output "Found vc tools: $vcvarspath"

          cmd.exe /c "call `"$vcvarspath\VC\Auxiliary\Build\vcvars64.bat`" && .\$ScriptName --local --no-check --yes --trust `"$BUILD2_TRUST`""
          Add-Content $env:GITHUB_PATH "C:\build2\bin"
        }

        New-Item -Path $BUILD2_BUILD_DIR -ItemType Directory
        Set-Location -Path $BUILD2_BUILD_DIR -PassThru

        switch($BUILD2_VERSION)
        {
          "latest"
          {
          	Write-Output "Download https://download.build2.org/toolchain.sha256"
          	Invoke-WebRequest -Uri "https://download.build2.org/toolchain.sha256" -OutFile "toolchain.sha256"

            $archive_name = extract_build2_archive -Path "toolchain.sha256"
            $baseutils_name = extract_build2_baseutils -Path "toolchain.sha256"
            $script_name = extract_build2_script -Path "toolchain.sha256"

            $BUILD2_ARCHIVE="https://download.build2.org/$archive_name"
            $BUILD2_BASEUTILS = "https://download.build2.org/$baseutils_name"
            $BUILD2_SCRIPT="https://download.build2.org/$script_name"
          }

          "staged"
          {
          	Write-Output "Download https://stage.build2.org/0/toolchain.sha256"
          	Invoke-WebRequest -Uri "https://stage.build2.org/0/toolchain.sha256" -OutFile "toolchain.sha256"

            $archive_name = extract_build2_archive -Path "toolchain.sha256"
            $baseutils_name = extract_build2_baseutils -Path "toolchain.sha256"
            $script_name = extract_build2_script -Path "toolchain.sha256"

            $BUILD2_ARCHIVE="https://stage.build2.org/0/$archive_name"
            $BUILD2_BASEUTILS = "https://stage.build2.org/0/$baseutils_name"
            $BUILD2_SCRIPT="https://stage.build2.org/0/$script_name"
          }

          default
          {
            $BUILD2_ARCHIVE = "https://download.build2.org/$BUILD2_VERSION/build2-toolchain-$BUILD2_VERSION.tar.xz"
            $BUILD2_BASEUTILS = "https://download.build2.org/$BUILD2_VERSION/build2-baseutils-$BUILD2_VERSION-x86_64-windows.zip"
            $BUILD2_SCRIPT = "https://download.build2.org/$BUILD2_VERSION/build2-install-$BUILD2_WINDOWS_COMPILER-$BUILD2_VERSION.bat"
          }
        }

        install_build2 -ArchiveUrl $BUILD2_ARCHIVE -ScriptUrl $BUILD2_SCRIPT -BaseUtilsUrl $BUILD2_BASEUTILS

    - run: b --version
      shell: cmd
      if: ${{ runner.os == 'Windows' }}
    - run: bdep --version
      shell: cmd
      if: ${{ runner.os == 'Windows' }}
    - run: bpkg --version
      shell: cmd
      if: ${{ runner.os == 'Windows' }}
